{"version":3,"sources":["webpack://Mockachino/webpack/universalModuleDefinition","webpack://Mockachino/webpack/bootstrap","webpack://Mockachino/./src/Mockachino.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","usStatesData","usMenNames","usWomenNames","usSurnames","usMajorCities","usIndustries","lorem","Mockachino","opts","arguments","length","undefined","_classCallCheck","this","person","sex","LOCALES","includes","locale","defineLocaleVars","getPerson","address","getAddress","phoneNumber","getPhoneNumber","number","job","getJob","text","getLorem","sentence","paragraph","states","menNames","womenNames","surnames","majorCities","industries","code","abbrev","zipcode","getRandomInt","areaCode","subNumber","country","countryCode","cityCode","numberWithAreaCode","getUsPhoneNumber","names","nameIndex","middleNameIndex","preTitleIndex","suffixTitleIndex","emailProviders","titles","prefixTitle","suffixTitle","academic","allNames","nameTypeIndex","surnameIndex","emailProvIndex","middlename","middleInitial","charAt","lastname","initials","email","toLocaleLowerCase","academicTitle","title","stateIndex","stateData","cityIndex","city","split","state","stateAbbrev","abbreviation","zipCode","getZipcode","countryAbbrev","industry","industryName","jobHours","jobType","hours","type","max","min","Math","ceil","floor","random","lorems","ret"],"mappings":"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","file":"mockachino.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mockachino\"] = factory();\n\telse\n\t\troot[\"Mockachino\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// *********************************************************************\n// Mockachino - Generate mock data for your apps. Take a sip and relax\n// *********************************************************************\n\nconst usStatesData = require('./data/locale/us/us_states.json');\nconst usMenNames = require('./data/locale/us/us_names_men.json');\nconst usWomenNames = require('./data/locale/us/us_names_women.json');\nconst usSurnames = require('./data/locale/us/us_surnames.json');\nconst usMajorCities = require('./data/locale/us/us_major_cities.json');\nconst usIndustries = require('./data/locale/us/us_job_indutries.json');\nconst lorem = require('./data/text/lorem.json');\n\nclass Mockachino {\n    /**\n     * Mock all sorts of things\n     * @constructor\n     * @param {object} opts Options for the mocker\n     */\n    constructor(opts = {}) {\n        //set the person object\n        //so that new properties can later be set or left undefined\n        this.person = {};\n        //grab options\n        //set the sex of the person\n        this.person.sex = opts.person ? opts.person.sex : undefined;\n        //test locales\n        this.LOCALES = ['us'];\n        //set the locale - default us\n        this.LOCALES.includes(opts.locale) ? this.defineLocaleVars(opts.locale) : this.defineLocaleVars();\n    }\n\n    mock() {\n        return {\n            person: this.getPerson(),\n            address: this.getAddress(),\n            phoneNumber: this.getPhoneNumber().number,\n            job: this.getJob(),\n            text: Mockachino.getLorem().text,\n            sentence: Mockachino.getLorem().sentence,\n            paragraph: Mockachino.getLorem().paragraph\n        };\n    }\n\n    defineLocaleVars(locale = 'us') {\n        switch (locale) {\n        case 'us':\n            this.locale = {\n                states: usStatesData,\n                menNames: usMenNames,\n                womenNames: usWomenNames,\n                surnames: usSurnames,\n                majorCities: usMajorCities,\n                industries: usIndustries,\n                code: 1,\n                abbrev: 'US',\n                name: 'United States'\n            };\n            break;\n        }\n    }\n\n    // **********************\n    // Helpers\n    // **********************\n\n    /**\n     * Generates random integers between min and max\n     * @param {Number} max An exclusive upper bound for the random number generated\n     * @param {Number} min An inclusive lower bound for the random number generated. 0 by default.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random | MDN: Math Random}\n     */\n    static getRandomInt(max, min = 0) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    // **********************\n    // Getters\n    // **********************\n\n    /**\n     * Genrates lorem ipsum data\n     */\n    static getLorem() {\n        //get a sentence from the lorem array\n        let sentence = lorem[Mockachino.getRandomInt(lorem.length)];\n        let lorems = length => {\n            let ret = '';\n            //concatenate the strings in lorem length times to form a bigger string\n            //add line breaks to seprate each sentence/string in lorem\n            //creating paragraphs of length number of sentences.\n            for(let i = 0; i <= length; i++) {\n                //Rotate the index, so that no matter what the size of the lorem array is\n                //data is always retrieved. Avoiding exceeding the size of the array\n                ret += `${lorem[i % lorem.length]}.\\n`;\n            }\n            return ret;\n        };\n\n        //A paragraph will always have 5 sentences\n        let paragraph = lorems(5);\n        //text will allows the user to set the amount of sentences they need\n        let text = lorems;\n\n        return {\n            text,\n            sentence,\n            paragraph\n        };\n    }\n\n    /**\n     * Mocks zip codes from anywhere depending on the locale\n     */\n    getZipcode() {\n        let zipcode = '';\n        if(this.locale) {\n            switch (this.locale.abbrev) {\n            case 'US':\n                //A US zip code is a 5 digits number consisting of digits from 0-9\n                for(let i = 0; i < 5; i++) {\n                    zipcode += Mockachino.getRandomInt(9);\n                }\n                break;\n            }\n        }\n        return zipcode;\n    }\n\n    /**\n     * Generate a US phone number\n     */\n    getUsPhoneNumber() {\n        //format of an US phone number\n        //According to Wikipedia https://bit.ly/2LvNuVn\n        //NPA-NXX-XXXX\n        //NPA - Area code\n        //NXX-XXXX - 7 digit subscriber number\n        //N - code for the local central office, goes from 2 to 9\n\n        //generate the area code\n        //generate N by generate a random int from 2 to 9\n        //generate the PA part of the area code with random number from 0 to 9\n        let areaCode = `${Mockachino.getRandomInt(10, 2)}${Mockachino.getRandomInt(9, 0)}${Mockachino.getRandomInt(9, 0)}`;\n        //generate the rest of the 7 digit subscriber number\n        let subNumber = `${Mockachino.getRandomInt(10, 2)}`;\n        for(let i = 0; i < 6; i++) subNumber += i;\n\n        let number = {\n            country: 'us',\n            countryCode: '+1',\n            cityCode: areaCode,\n            subNumber,\n            number: `${areaCode}${subNumber}`,\n            numberWithAreaCode: `+1${areaCode}${subNumber}`\n        };\n        return number;\n    }\n\n    /**\n     * Mocks a phone number from the locale\n     */\n    getPhoneNumber() {\n        let number = {};\n        if(this.locale) {\n            switch (this.locale.abbrev) {\n            case 'US':\n                number = this.getUsPhoneNumber();\n                break;\n            }\n        }\n        return number;\n    }\n\n    /**\n     * Mocks a person\n     */\n    getPerson() {\n        //the names array\n        let names = [];\n        //the index of a random name in the names array\n        let nameIndex = 0;\n        let middleNameIndex = 0;\n        //the person titles\n        let preTitleIndex;\n        let suffixTitleIndex;\n\n        //grab common surnames\n        const surnames = this.locale.surnames;\n\n        //set common email providers\n        const emailProviders = [\n            'gmail.com',\n            'hotmail.com',\n            'outlook.com',\n            'live.com'\n        ];\n\n        //set all sorts of titles\n        const titles = {\n            prefixTitle: ['Mr.', 'Mrs.', 'Ms.'],\n            suffixTitle: ['Sr.', 'Jr.', '3rd', 'The 3rd'],\n            academic: ['Dr.', 'Prof.']\n        };\n\n        //if the person sex is defined\n        if(this.person.sex) {\n            switch (this.person.sex) {\n            case 'man':\n                nameIndex = Mockachino.getRandomInt(this.locale.menNames.length);\n                middleNameIndex = Mockachino.getRandomInt(this.locale.menNames.length);\n                names = this.locale.menNames;\n                preTitleIndex = 0;\n                suffixTitleIndex = Mockachino.getRandomInt(titles.suffixTitle.length);\n                break;\n            case 'woman':\n                nameIndex = Mockachino.getRandomInt(this.locale.womenNames.length);\n                middleNameIndex = Mockachino.getRandomInt(this.locale.womenNames.length);\n                names = this.locale.womenNames;\n                preTitleIndex = Mockachino.getRandomInt(titles.prefixTitle.length, 1);\n                break;\n            }\n        } else {\n            //create a composite names array\n            let allNames = [this.locale.menNames, this.locale.womenNames];\n            //grab either men or women names 0 or 1 respectively\n            let nameTypeIndex = Mockachino.getRandomInt(allNames.length);\n            //the names array randomly selected\n            names = allNames[nameTypeIndex];\n            //get an index for the array of names which will be the name and middlename\n            nameIndex = Mockachino.getRandomInt(names.length);\n            middleNameIndex = Mockachino.getRandomInt(names.length);\n            //define the person titles\n            if(nameTypeIndex === 0) {\n                preTitleIndex = 0;\n                suffixTitleIndex = Mockachino.getRandomInt(titles.suffixTitle.length);\n            } else {\n                preTitleIndex = Mockachino.getRandomInt(titles.prefixTitle.length, 1);\n            }\n        }\n\n        //get an index for surnames\n        let surnameIndex = Mockachino.getRandomInt(surnames.length);\n        //get an index for email providers\n        let emailProvIndex = Mockachino.getRandomInt(emailProviders.length);\n\n        let person = {\n            name: names[nameIndex],\n            middlename: names[middleNameIndex],\n            middleInitial: `${names[middleNameIndex].charAt(0)}.`,\n            lastname: surnames[surnameIndex],\n            initials: `${names[nameIndex].charAt(0)}.${surnames[surnameIndex].charAt(0)}`,\n            email: `${names[nameIndex].toLocaleLowerCase()}.${surnames[surnameIndex].toLocaleLowerCase()}@${emailProviders[emailProvIndex]}`,\n            academicTitle: titles.academic[Mockachino.getRandomInt(titles.academic.length)]\n        };\n\n        //if prefix and suffix titles are set add them to the person's object\n        if(preTitleIndex !== undefined) person.title = titles.prefixTitle[preTitleIndex];\n        if(suffixTitleIndex !== undefined) person.suffixTitle = titles.suffixTitle[suffixTitleIndex];\n\n        return person;\n    }\n\n    /**\n     * Mocks an address\n     */\n    getAddress() {\n        //grab a state in the array of states\n        let stateIndex = Mockachino.getRandomInt(this.locale.states.length);\n        //get the actual state\n        let stateData = this.locale.states[stateIndex];\n\n        //usMajorCities are defines as string of city, state\n        //so we need to split the string first and than return the city\n        let cityIndex = Mockachino.getRandomInt(this.locale.majorCities.length);\n        let city = this.locale.majorCities[cityIndex].split(',')[0];\n\n        return {\n            city,\n            state: stateData.name,\n            stateAbbrev: stateData.abbreviation,\n            zipCode: this.getZipcode(),\n            countryAbbrev: this.locale.abbrev,\n            country: this.locale.name\n        };\n    }\n\n    /**\n     * Mocks a job position\n     */\n    getJob() {\n        //grab an industry\n        //industry is an array of industry fields\n        //curently the first field of the array is the industry name\n        let industry = this.locale.industries[Mockachino.getRandomInt(this.locale.industries.length)];\n        //get the industry name\n        let industryName = industry[0];\n        //get industry fields\n        let industryField = industry[Mockachino.getRandomInt(industry.length, 1)];\n\n        const jobHours = [\n            'Part-time',\n            'Full-time',\n            'Fixed',\n            'Flexible',\n            'Rotating'\n        ];\n\n        const jobType = [\n            'Remote',\n            'Freelance',\n            'Self-employed',\n            'Consulting'\n        ];\n\n        return {\n            name: industryField,\n            city: this.locale.majorCities[Mockachino.getRandomInt(this.locale.majorCities.length)].split(',')[0],\n            industry: industryName,\n            hours: jobHours[Mockachino.getRandomInt(jobHours.length)],\n            type: jobType[Mockachino.getRandomInt(jobType.length)]\n        };\n    }\n}\n\n//export as a commonJS module\nmodule.exports = Mockachino;\n"],"sourceRoot":""}