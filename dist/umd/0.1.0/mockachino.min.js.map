{"version":3,"sources":["webpack://Mockachino/webpack/universalModuleDefinition","webpack://Mockachino/webpack/bootstrap","webpack://Mockachino/./src/Mockachino.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Mockachino","person","this","getPerson","address","getAddress","phoneNumber","getPhoneNumber","number","job","getJob","text","getLorem","sentence","paragraph","zipcode","getRandomInt","areaCode","subNumber","country","countryCode","cityCode","numberWithAreaCode","numberObj","getUsPhoneNumber","names","usMenNames","usWomenNames","surnames","usSurnames","emailProviders","titles","prefixTitle","suffixTitle","academic","nameTypeIndex","length","surnameIndex","nameArrayIndex","emailProvIndex","lastname","initials","charAt","email","toLocaleLowerCase","title","Math","floor","midNmIndex","middlename","middleInitial","stateIndex","usStatesData","stateData","cityIndex","usMajorCities","city","split","state","stateAbbrev","abbreviation","zipCode","getUsZipcode","industry","usIndustries","industryName","jobHours","jobType","hours","type","max","min","arguments","undefined","ceil","random","lorems","ret","lorem"],"mappings":"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","file":"mockachino.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mockachino\"] = factory();\n\telse\n\t\troot[\"Mockachino\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// *********************************************************************\n// Mockachino - Generate mock data for your apps. Take a sip and relax\n// *********************************************************************\n\nimport usStatesData from './data/locale/us/us_states.json';\nimport usMenNames from './data/locale/us/us_names_men.json';\nimport usWomenNames from './data/locale/us/us_names_women.json';\nimport usSurnames from './data/locale/us/us_surnames.json';\nimport usMajorCities from './data/locale/us/us_major_cities.json';\nimport usIndustries from './data/locale/us/us_job_indutries.json';\nimport lorem from './data/text/lorem.json';\n\nexport default class Mockachino {\n    /**\n     * Mock all sorts of things\n     * @constructor\n     */\n    mock() {\n        return {\n            person: this.getPerson(),\n            address: this.getAddress(),\n            phoneNumber: this.getPhoneNumber('US').number,\n            job: this.getJob(),\n            text: Mockachino.getLorem().text,\n            sentence: Mockachino.getLorem().sentence,\n            paragraph: Mockachino.getLorem().paragraph\n        };\n    }\n\n    // **********************\n    // Helpers\n    // **********************\n\n    /**\n     * Generates random integers between min and max\n     * @param {Number} max An exclusive upper bound for the random number generated\n     * @param {Number} min An inclusive lower bound for the random number generated. 0 by default.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random | MDN: Math Random}\n     */\n    static getRandomInt(max, min = 0) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    // **********************\n    // Getters\n    // **********************\n\n    /**\n     * Genrates lorem ipsum data\n     */\n    static getLorem() {\n        //get a sentence from the lorem array\n        let sentence = lorem[Mockachino.getRandomInt(lorem.length)];\n        let lorems = length => {\n            let ret = '';\n            //concatenate the strings in lorem length times to form a bigger string\n            //add line breaks to seprate each sentence/string in lorem\n            //creating paragraphs of length number of sentences.\n            for(let i = 0; i <= length; i++) {\n                //Rotate the index, so that no matter what the size of the lorem array is\n                //data is always retrieved. Avoiding exceeding the size of the array\n                ret += `${lorem[i % lorem.length]}.\\n`;\n            }\n            return ret;\n        };\n\n        //A paragraph will always have 5 sentences\n        let paragraph = lorems(5);\n        //text will allows the user to set the amount of sentences they need\n        let text = lorems;\n\n        return {\n            text,\n            sentence,\n            paragraph\n        };\n    }\n\n    /**\n     * Mocks US zip codes\n     * A US zip code is a 5 digits number consisting of digits from 0-9\n     */\n    getUsZipcode() {\n        let zipcode = '';\n        for(let i = 0; i < 5; i++) {\n            zipcode += Mockachino.getRandomInt(9);\n        }\n        return zipcode;\n    }\n\n    /**\n     * Generate a US phone number\n     */\n    getUsPhoneNumber() {\n        //format of an US phone number\n        //According to Wikipedia https://bit.ly/2LvNuVn\n        //NPA-NXX-XXXX\n        //NPA - Area code\n        //NXX-XXXX - 7 digit subscriber number\n        //N - code for the local central office\n        //N goes from 2 to 9\n\n        //generate the area code\n        //generate N by generate a random int from 2 to 9\n        //generate the PA part of the area code with random number from 0 to 9\n        let areaCode = `${Mockachino.getRandomInt(10, 2)}${Mockachino.getRandomInt(9, 0)}${Mockachino.getRandomInt(9, 0)}`;\n        //generate the rest of the 7 digit subscriber number\n        let subNumber = `${Mockachino.getRandomInt(10, 2)}`;\n        for(let i = 0; i < 6; i++) subNumber += i;\n\n        let number = {\n            country: 'US',\n            countryCode: '+1',\n            cityCode: areaCode,\n            subNumber,\n            number: `${areaCode}${subNumber}`,\n            numberWithAreaCode: `+1${areaCode}${subNumber}`\n        };\n        return number;\n    }\n\n    /**\n     * Mocks a phone number based on a country\n     * @param {string} country The country in which the phone number should be from\n     */\n    getPhoneNumber(country) {\n        let numberObj = {};\n        switch (country) {\n        case 'US':\n            numberObj = this.getUsPhoneNumber();\n            break;\n        }\n        return numberObj;\n    }\n\n    /**\n     * Mocks a person\n     */\n    getPerson() {\n        //define initial data\n        const names = [usMenNames, usWomenNames];\n        const surnames = usSurnames;\n\n        const emailProviders = [\n            'gmail.com',\n            'hotmail.com',\n            'outlook.com',\n            'live.com'\n        ];\n\n        //All sorts of titles\n        const titles = {\n            prefixTitle: [\n                'Mr.',\n                'Mrs.',\n                'Ms.'\n            ],\n            suffixTitle: [\n                'Sr.',\n                'Jr.',\n                '3rd',\n                'The 3rd'\n            ],\n            academic: [\n                'Dr.',\n                'Prof.'\n            ]\n        };\n\n        //grab either men or women names\n        let nameTypeIndex = Mockachino.getRandomInt(names.length);\n        //get an index for surnames\n        let surnameIndex = Mockachino.getRandomInt(surnames.length);\n        //get an index for an array of names\n        let nameArrayIndex = Mockachino.getRandomInt(names[nameTypeIndex].length);\n        //get an index for email providers\n        let emailProvIndex = Mockachino.getRandomInt(emailProviders.length);\n\n        let person = {\n            name: names[nameTypeIndex][nameArrayIndex],\n            lastname: surnames[surnameIndex],\n            initials: `${names[nameTypeIndex][nameArrayIndex].charAt(0)}${surnames[surnameIndex].charAt(0)}`,\n            email: `${names[nameTypeIndex][nameArrayIndex].toLocaleLowerCase()}.${surnames[surnameIndex].toLocaleLowerCase()}@${emailProviders[emailProvIndex]}`,\n            title: titles.prefixTitle[Mockachino.getRandomInt(titles.prefixTitle.length)]\n        };\n\n        //generate a middlename 50% of the time\n        if(nameArrayIndex > Math.floor(names.length / 2)) {\n            let midNmIndex = Mockachino.getRandomInt(names.length);\n            let middlename = names[nameTypeIndex][midNmIndex];\n            let middleInitial = middlename.charAt(0);\n            person.middlename = middlename;\n            person.middleInitial = `${middleInitial}.`;\n        }\n\n        return person;\n    }\n\n    /**\n     * Mocks an address\n     */\n    getAddress() {\n        //list of countries supported by Mockachino\n        const countries = [{\n            countryCode: 1,\n            abbrev: 'US',\n            name: 'United States'\n        }];\n\n        //grab a state in the array of states\n        let stateIndex = Mockachino.getRandomInt(usStatesData.length);\n        //get the actual state\n        let stateData = usStatesData[stateIndex];\n        //define an index for a country\n        let countryIndex = 0;\n\n        //usMajorCities are defines as string of city, state\n        //so we need to split the string first and than return the city\n        let cityIndex = Mockachino.getRandomInt(usMajorCities.length);\n        let city = usMajorCities[cityIndex].split(',')[0];\n\n        return {\n            city,\n            state: stateData.name,\n            stateAbbrev: stateData.abbreviation,\n            zipCode: this.getUsZipcode(),\n            country: countries[countryIndex].abbrev\n        };\n    }\n\n    /**\n     * Mocks a job position\n     */\n    getJob() {\n        //grab an industry\n        //industry is an array of industry fields\n        //curently the first field of the array is the industry name\n        let industry = usIndustries[Mockachino.getRandomInt(usIndustries.length)];\n        //get the industry name\n        let industryName = industry[0];\n        //get industry fields\n        let industryField = industry[Mockachino.getRandomInt(industry.length, 1)];\n\n        const jobHours = [\n            'Part-time',\n            'Full-time',\n            'Fixed',\n            'Flexible',\n            'Rotating'\n        ];\n\n        const jobType = [\n            'Remote',\n            'Freelance',\n            'Self-employed',\n            'Consulting'\n        ];\n\n        return {\n            name: industryField,\n            city: this.getAddress().city,\n            industry: industryName,\n            hours: jobHours[Mockachino.getRandomInt(jobHours.length)],\n            type: jobType[Mockachino.getRandomInt(jobType.length)]\n        };\n    }\n}\n\nmodule.exports = Mockachino;\n"],"sourceRoot":""}